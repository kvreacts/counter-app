{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","this","props","totalCounters","Component","Counter","_this","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","count","Counters","onReset","counters","map","components_counter","key","App","state","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","setState","handleReset","c","handleDelete","counterId","filter","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAiBeA,mLAbX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,SAEEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wCACbC,KAAKC,MAAMC,wBAPHC,aCiCNC,mLAhCJ,IAAAC,EAAAL,KACP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,KAAKM,mBAAoBN,KAAKO,eAC/CX,EAAAC,EAAAC,cAAA,UACEU,QAAS,kBAAMH,EAAKJ,MAAMQ,YAAYJ,EAAKJ,MAAMS,UACjDX,UAAU,4BAFZ,aAOAH,EAAAC,EAAAC,cAAA,UACEU,QAAS,kBAAMH,EAAKJ,MAAMU,SAASN,EAAKJ,MAAMS,QAAQE,KACtDb,UAAU,6BAFZ,qDAWJ,IAAIc,EAAU,mBAEd,OADAA,GAAwC,IAA7Bb,KAAKC,MAAMS,QAAQI,MAAc,UAAY,gDAI5C,IACJA,EAAUd,KAAKC,MAAMS,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,SA9BZX,aCwBPY,mLAtBJ,IAAAV,EAAAL,KACP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEU,QAASR,KAAKC,MAAMe,QACpBjB,UAAU,8BAFZ,SAMCC,KAAKC,MAAMgB,SAASC,IAAI,SAAAR,GAAO,OAC9Bd,EAAAC,EAAAC,cAACqB,EAAD,CACEC,IAAKV,EAAQE,GACbD,SAAUN,EAAKJ,MAAMU,SACrBF,YAAaJ,EAAKJ,MAAMQ,YACxBC,QAASA,cAfEP,aCoDRkB,oNAjDbC,MAAQ,CACNL,SAAU,CACR,CAAEL,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,OAIpBS,gBAAkB,SAAAb,GAChB,IAAMO,EAAQO,OAAAC,EAAA,EAAAD,CAAOnB,EAAKiB,MAAML,UAC1BS,EAAQT,EAASU,QAAQjB,GAC/BO,EAASS,GAATF,OAAAI,EAAA,EAAAJ,CAAA,GAAuBd,GACvBO,EAASS,GAAOZ,QAChBT,EAAKwB,SAAS,CAAEZ,gBAGlBa,YAAc,WACZ,IAAMb,EAAWZ,EAAKiB,MAAML,SAASC,IAAI,SAAAa,GAEvC,OADAA,EAAEjB,MAAQ,EACHiB,IAET1B,EAAKwB,SAAS,CAAEZ,gBAGlBe,aAAe,SAAAC,GACb,IAAMhB,EAAWZ,EAAKiB,MAAML,SAASiB,OAAO,SAAAH,GAAC,OAAIA,EAAEnB,KAAOqB,IAC1D5B,EAAKwB,SAAS,CAAEZ,sFAIhB,OACErB,EAAAC,EAAAC,cAACF,EAAAC,EAAMsC,SAAP,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CACElC,cAAeF,KAAKsB,MAAML,SAASiB,OAAO,SAAAH,GAAC,OAAIA,EAAEjB,MAAQ,IAAGuB,SAE9DzC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAACwC,EAAD,CACErB,SAAUjB,KAAKsB,MAAML,SACrBD,QAAShB,KAAK8B,YACdrB,YAAaT,KAAKuB,gBAClBZ,SAAUX,KAAKgC,wBA1CT7B,cCOEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d101f02c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <span className=\"navbar-brand mb-0 h1\">\r\n          Navbar\r\n          <span className=\"badge badge-pill badge-secondary m-3\">\r\n            {this.props.totalCounters}\r\n          </span>\r\n        </span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.count === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { count } = this.props.counter;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.props.onReset}\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n        >\r\n          Reset\r\n        </button>\r\n        {this.props.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={this.props.onDelete}\r\n            onIncrement={this.props.onIncrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Counters from \"./components/counters\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, count: 0 },\r\n      { id: 2, count: 0 },\r\n      { id: 3, count: 0 },\r\n      { id: 4, count: 0 }\r\n    ]\r\n  };\r\n\r\n  handleIncrement = counter => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = { ...counter };\r\n    counters[index].count++;\r\n    this.setState({ counters });\r\n  };\r\n\r\n  handleReset = () => {\r\n    const counters = this.state.counters.map(c => {\r\n      c.count = 0;\r\n      return c;\r\n    });\r\n    this.setState({ counters });\r\n  };\r\n\r\n  handleDelete = counterId => {\r\n    const counters = this.state.counters.filter(c => c.id !== counterId);\r\n    this.setState({ counters });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar\r\n          totalCounters={this.state.counters.filter(c => c.count > 0).length}\r\n        />\r\n        <main className=\"container\">\r\n          <Counters\r\n            counters={this.state.counters}\r\n            onReset={this.handleReset}\r\n            onIncrement={this.handleIncrement}\r\n            onDelete={this.handleDelete}\r\n          />\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}